# This script must contain one folder for the module to be implemented
# This folder must be named PR_WRP
# The contents of this folder must be copied from this one, generated by Vivado HLS:
# .../solution/impl/vhdl

# *********USE THE OPTION config_interface -m_axi_addr64 TO RUN VIVADO HLS**********

# This file must be executed with the following command:
# vivado -mode TCL -source Gen_Blocker.tcl 

# Parameters for Bounding Box
# Start position for PR Module (Resource Index)
set ::env(start) 0 
# Stop position for PR Module (Resource Index)
set ::env(stop)  90
# Height of PR Module (Clock Region Units)
set ::env(PRheight) 2
# Starting Row of PR Module
set ::env(CRrow) 300
# CR Height
set ::env(CRheight) 60
# DSP rows in a CR
set ::env(DSPheight) 5

# Parameters for Blocker
# HLONG wires connect 2 switch boxes 6 columns away
# HQUAD wires connect 2 switch boxes 3 columns away
# DOUBLE wires connect 2 switch boxes 1 column away
set ::env(BlockWidth)  6;
 
# SINGLE wires connect 2 switch boxes 1 row away
# DOUBLE wires connect 2 switch boxes 2 rows away
# VQUAD wires connect 2 switch boxes 4 rows away
# VLONG wires connect 2 switch boxes 12 rows away
set ::env(BlockHeight)  12; 



# ---------------------------   Generate OOC for Kernel  --------------------------------------------

# Define the FPGA
set device xczu9eg
set package -ffvc900
set speed -1-i-es1

# Folder used to store the synthesized design
file mkdir ./TOP_SYNTH


## Synthesize TOP with a black box for the module
#create_project -in_memory -part ${device}${package}${speed}
#set_property IP_REPO_PATHS { ../../../../../../output/export/rtf/ip/xilinx/} [current_fileset]
#update_ip_catalog
#add_files ./Sources/PR_TOP.vhd
#add_files ./Sources/wrapper_v5.vhd
#
#
#synth_design -mode default -flatten_hierarchy rebuilt -top MOD_TOP  -part ${device}${package}${speed}
#write_checkpoint -force ./TOP_SYNTH/MOD_TOP.dcp
#report_utilization -file ./TOP_SYNTH/MOD_TOP_utilization_synth.rpt
#
#close_project

# Open the TOP Module 
open_checkpoint ./TOP_SYNTH/MOD_TOP.dcp

create_pblock pblock_PR_Kernel
# generate pblock coordinates from automatic bounding box tool
source ./Scripts/Bound_v03.tcl
add_cells_to_pblock pblock_PR_Kernel [get_cells [list inst_PR_WRP_0]]

# create an internal pblock in order to prevent signal leaking
# number of rows to shrink (upper and bottom)
set row_shrink 5
# get coordinates from original pblock
set prop [get_property GRID_RANGES [get_pblocks pblock_PR_Kernel ]]
if [regexp  "(SLICE_X.*)+(:)+(SLICE_X.*)" $prop match slice1 colon slice2] {
puts $slice1
puts $slice2
}
set coord1 [regexp -all -inline -- {[0-9]+} $slice1]
set coord2 [regexp -all -inline -- {[0-9]+} $slice2]

# creates new coordinates shrinked
set new_pbl "SLICE_X[lindex $coord1 0]Y[expr {[lindex $coord1 1] + $row_shrink}]:SLICE_X[lindex $coord2 0]Y[expr {[lindex $coord2 1] - $row_shrink}]"

# creates new shrinked pblock
create_pblock pblock_PR_Kernel_int
resize_pblock pblock_PR_Kernel_int -add "$new_pbl"
set_property  gridtypes {RAMB36 RAMB18 DSP48E2 SLICE} [get_pblocks pblock_PR_Kernel_int]
add_cells_to_pblock pblock_PR_Kernel_int [get_cells [list inst_PR_WRP_0]]

write_checkpoint -force 1_post_constraints.dcp

write_checkpoint    -force 2_post_opt.dcp

# place connection macros on SLOT
source ./Scripts/place_pre_2.tcl

write_checkpoint    -force 3_post_place.dcp

# route connection macros on SLOT
source ./Scripts/route_pre_2.tcl

write_checkpoint    -force 4_post_macro_route.dcp


# creates tunnel script for GoAhead
source ./Scripts/Gen_Macro_Tunnel.tcl

# generate blocker 
exec GoAhead -exec  ./Scripts/Gen_Blocker_v01.goa

# changes blocker to use VCC wires
exec ./Scripts/vcc.bat 

# place blocker
source ./Scripts/module_blocker_VCC.tcl

# fix the blocker
startgroup
set_property is_route_fixed 1 [get_nets {blocker_net_BlockSelection }]
set_property is_bel_fixed 1 [get_cells {VCC_for_BlockSelection }]
set_property is_loc_fixed 1 [get_cells {VCC_for_BlockSelection }]
endgroup

# route with fixed blocker
write_checkpoint  -force 5_route_after_fixing_blocker.dcp
write_checkpoint  -force blocker.dcp
